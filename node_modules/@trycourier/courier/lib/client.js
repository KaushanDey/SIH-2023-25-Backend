"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
var audiences_1 = require("./audiences");
var audit_events_1 = require("./audit-events");
var automations_1 = require("./automations");
var brands_1 = require("./brands");
var bulk_1 = require("./bulk");
var issue_token_1 = require("./issue-token");
var lists_1 = require("./lists");
var notifications_1 = require("./notifications");
var preferences_1 = require("./preferences");
var profile_1 = require("./profile");
var send_1 = require("./send");
var tenants_1 = require("./tenants");
var token_management_1 = require("./token-management");
var users_1 = require("./users");
var cancelMessage = function (options) {
    return function (messageId) { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, options.httpClient.post("/messages/" + messageId + "/cancel")];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.data];
            }
        });
    }); };
};
var getMessage = function (options) {
    return function (messageId) { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, options.httpClient.get("/messages/" + messageId)];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.data];
            }
        });
    }); };
};
var getMessageHistory = function (options) {
    return function (messageId) { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, options.httpClient.get("/messages/" + messageId + "/history")];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.data];
            }
        });
    }); };
};
var getMessageOutput = function (options) {
    return function (messageId) { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, options.httpClient.get("/messages/" + messageId + "/output")];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.data];
            }
        });
    }); };
};
var getMessages = function (options) {
    return function (params) { return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, options.httpClient.get("/messages", {
                        params: {
                            cursor: params === null || params === void 0 ? void 0 : params.cursor,
                            event: params === null || params === void 0 ? void 0 : params.eventId,
                            list: params === null || params === void 0 ? void 0 : params.listId,
                            messageId: params === null || params === void 0 ? void 0 : params.messageId,
                            notification: params === null || params === void 0 ? void 0 : params.notificationId,
                            recipient: params === null || params === void 0 ? void 0 : params.recipientId,
                            status: params === null || params === void 0 ? void 0 : params.status,
                            tags: params === null || params === void 0 ? void 0 : params.tags,
                        },
                    })];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.data];
            }
        });
    }); };
};
exports.client = function (options) {
    return {
        addRecipientToLists: profile_1.addRecipientToLists(options),
        audiences: audiences_1.audiences(options),
        auditEvents: audit_events_1.auditEvents(options),
        automations: automations_1.automations(options),
        bulk: bulk_1.bulk(options),
        cancelMessage: cancelMessage(options),
        createBrand: brands_1.createBrand(options),
        deleteBrand: brands_1.deleteBrand(options),
        deleteProfile: profile_1.deleteProfile(options),
        getBrand: brands_1.getBrand(options),
        getBrands: brands_1.getBrands(options),
        getMessage: getMessage(options),
        getMessageHistory: getMessageHistory(options),
        getMessageOutput: getMessageOutput(options),
        getMessages: getMessages(options),
        getProfile: profile_1.getProfile(options),
        getRecipientSubscriptions: profile_1.getRecipientSubscriptions(options),
        issueToken: issue_token_1.postIssueToken(options),
        lists: lists_1.lists(options),
        mergeProfile: profile_1.mergeProfile(options),
        notifications: notifications_1.notifications(options),
        preferences: preferences_1.preferences(options),
        removeRecipientFromAllLists: profile_1.removeRecipientFromAllLists(options),
        replaceBrand: brands_1.replaceBrand(options),
        replaceProfile: profile_1.replaceProfile(options),
        send: send_1.send(options),
        tenants: tenants_1.tenants(options),
        tokenManagement: token_management_1.tokenManagement(options),
        users: users_1.users(options),
    };
};
